{"version":3,"sources":["components/Homepage.js","App.js","components/Experience.js","components/About.js","serviceWorker.js","index.js"],"names":["Homepage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","myAbout","React","createRef","myExperiences","react_default","a","createElement","className","class","href","Component","App","components_Homepage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmCeA,cAhCX,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,QAAUC,IAAMC,YACrBT,EAAKU,cAAgBF,IAAMC,YAHXT,wEAMhB,OACIW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,YACHJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,8CAA8CD,MAAM,QAA5D,gBAGRJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACHJ,EAAAC,EAAAC,cAAA,KAAGG,KAAO,aAAaD,MAAM,SAA7B,QACAJ,EAAAC,EAAAC,cAAA,KAAGG,KAAO,aAAaD,MAAM,SAA7B,SACAJ,EAAAC,EAAAC,cAAA,KAAGG,KAAO,aAAaD,MAAM,SAA7B,WAETJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,kBAEIH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,cAAT,mGAGAJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,cAAT,mEAxBIP,IAAMS,WCiBdC,GCjBUV,IAAMS,UCAXT,IAAMS,iMFMtB,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACM,EAAD,cAJUX,IAAMS,YGMJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ad99ba5d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Homepage extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.myAbout = React.createRef();\r\n        this.myExperiences = React.createRef();\r\n    }    \r\n    render (){\r\n        return(\r\n            <div className=\"page\">\r\n                <nav className=\"nav\">\r\n                <div class=\"nav-left\">\r\n                        <a href=\"https://amhchow.github.io/personal_website/\" class=\"navL\">Anton Chow</a>\r\n                    </div>\r\n                </nav>\r\n                <div class=\"nav-right\">\r\n                        <a href = \"google.com\" class=\"navR1\">Work</a>\r\n                        <a href = \"google.com\" class=\"navR2\">About</a>\r\n                        <a href = \"google.com\" class=\"navR3\">Resume</a>\r\n                </div>\r\n               <div className=\"title\">\r\n                   Hey! I'm Anton,\r\n                   <p class=\"intro-text\">\r\n                       an aspiring UI/UX designer based in üìçToronto. I'm focused on design for social good.\r\n                   </p>\r\n                   <p class=\"internship\">\r\n                   Currently looking for a winter 2020 design internship.\r\n                   </p>\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}     \r\n\r\nexport default Homepage;","import React from 'react';\nimport Homepage from './components/Homepage';\nimport Experience from './components/Experience';\nimport About from './components/About';\nimport './App.css';\n\nclass App extends React.Component {\n  render () {\n    return (\n      <div className=\"background\">\n        <Homepage />\n      </div>\n    \n    );\n  }\n\n  }\n  \n\nexport default App;\n","import React from \"react\";\r\n\r\nclass Experience extends React.Component {\r\n  render() {\r\n    return <div>Exp.</div>;\r\n  }\r\n}\r\n\r\nexport default Experience;","import React from \"react\";\r\n\r\nclass About extends React.Component {\r\n  render() {\r\n    return <div>About</div>;\r\n  }\r\n}\r\n\r\nexport default About;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}